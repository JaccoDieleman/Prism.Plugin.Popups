trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore

name: 8.1.$(Build.BuildId)

variables:
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: Release

stages:
- stage: build
  pool:
    name: AppsTeam
    demands:
      agent.OS -equals Windows_NT
  displayName: Build NuGet Packages
  jobs:
  - job: buildJob
    displayName: Build Prism.Plugin.Popups
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetToolInstaller@1
      displayName: Use Latest NuGet
      inputs:
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        feedsToUse: config
        nugetConfigPath: NuGet.config

    - task: MSBuild@1
      displayName: Build Prism.Plugin.Popups
      inputs:
        solution: Prism.Plugin.Popups.sln
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)"'

    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: |
         **\*.Tests.csproj
        arguments: -c $(BuildConfiguration) --collect:"Code Coverage" -s $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings /p:DebugType=portable --no-build
      displayName: Run Tests

    - task: PublishPipelineArtifact@1
      displayName: Publish Package Artifacts
      inputs:
        artifactName: NuGet
        targetPath: '$(Build.ArtifactStagingDirectory)'
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
- stage: deploy
  pool:
    name: AppsTeam
    demands:
      agent.OS -equals Windows_NT
  displayName: Deploy CI Feed
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs: 
  - job: PushToFeed
    workspace:
      clean: all
    steps:
    - download: current
    - task: NuGetCommand@2
      inputs:
        command: push
        packagesToPush: $(Pipeline.Workspace)\packages\*.nupkg
        publishVstsFeed: Apps/FPSApps
